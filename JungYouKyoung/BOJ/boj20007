import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

/**
 * 떡돌리기
 */
public class Main {
	static class Location implements Comparable<Location>{
		int num;
		int weight;
		
		public Location(int num, int weight) {
			this.num = num;
			this.weight = weight;
		}
		
		public int compareTo(Location o) {
			return this.weight - o.weight;
		}
		
		
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		
		//왕복할 수 업승면 다음날 가야함
		int N = Integer.parseInt(st.nextToken()); //이웃집 수
		int M = Integer.parseInt(st.nextToken()); //M개의 도로
		int X = Integer.parseInt(st.nextToken()); //하루에 걸을 수 있는 거리 - 왕복 포함
		int Y = Integer.parseInt(st.nextToken()); //성현이의 집 - 시작점
		
		int[][] adjMatrix = new int[N][N]; 
		
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int A = Integer.parseInt(st.nextToken());
			int B = Integer.parseInt(st.nextToken());
			int C = Integer.parseInt(st.nextToken()); //도로의 길이
			
			//무방향 그래프
			adjMatrix[A][B] = adjMatrix[B][A] = C;
		}//입력 끝
		
		//최소거리 배열 만들기
		int[] dist = new int[N];
		Arrays.fill(dist, Integer.MAX_VALUE); //초기화
		
		Queue<Location> queue = new PriorityQueue<Location>();
		queue.offer(new Location(Y, 0)); //첫점 넣기
		dist[Y] = 0;
		
		while(!queue.isEmpty()) {
			Location current = queue.poll();// 끝점 꺼내기
			
			if(dist[current.num] > current.weight) { //기존값보다 작으면 갱신해줌
				dist[current.num] = current.weight;
			}
			
			for (int i = 0; i < adjMatrix[current.num].length; i++) { 
				//인접한 정점 다 넣기
				if(adjMatrix[current.num][i] != 0 && adjMatrix[current.num][i] != -1) {
					queue.offer(new Location(i, dist[current.num] + adjMatrix[current.num][i]*2)); //왕복가중치넣기
					adjMatrix[current.num][i] = -1; //방문처리
				} //왕복거리 다 넣음
				
			}
		} //end while
		
		Arrays.sort(dist);
//		System.out.println(Arrays.toString(dist));
		
		int sum = 0;
		int cnt = 0;
		int index = 0;
		//array 돌면서 값 확인하기 : X보다 작으면 더해주기 아니면
		if(dist[N-1] > X) {
			System.out.println(-1);
			return;
		}
		while(index < N) {
			while(sum + dist[index] <= X) {
				sum += dist[index++];
				if(index == N)
					break;
			}
			sum = 0;
			cnt++;
		}
		
		System.out.println(cnt);
		
	}// end main

}//end class
