import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static ArrayList<Integer>[] list;
	private static boolean[] isSelected;
	private static int[] isVisited;
	public static void main(String[] args) throws NumberFormatException, IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());//동기수
		int m = Integer.parseInt(br.readLine());//친구 관계
		
		list = new ArrayList[n+1];
		for (int i = 0; i < n+1; i++) {
			list[i] = new ArrayList<Integer>();
		}//선언해줌
		isSelected = new boolean[n+1];
		isVisited = new int[n+1];
		
		for (int i = 0; i < m; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine(), " ");
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			list[a].add(b);
			list[b].add(a);
		} //양방향 그래프 입력 완료
		
		
		//상근이는 일번
//		dfs(1, 0);
//		int cnt = 0;
//		for (boolean select : isSelected) {
//			if(select) {cnt++;}
//		}
//		System.out.println(cnt-1);
		
		int cnt = 0;
		bfs(1);
		for (int is : isVisited) {
			if(is >= 1 && is <= 2) cnt++;
		}
		System.out.println(cnt);
	}
	public static void dfs(int start, int depth) {
		
		isSelected[start] = true;
		if(depth == 2) {//깊이가 2가 되면 종료
			return;
		}
		for (int is : list[start]) {
			for (boolean b : isSelected) {
				if(!b) {
					dfs(is, depth+1);
				}
			}
		}
		
	}
	
	public static void bfs(int start) {
		Queue<int[]> queue = new ArrayDeque<int[]>();
		int cnt = 0;
		queue.offer(new int[]{start, cnt});//큐에 넣기
		isSelected[start] = true;//방문체크
		isVisited[start] = cnt;
		while(!queue.isEmpty()) {
			int[] current = queue.poll();
			cnt = current[1];
			
			for (int i = 0; i < list[current[0]].size(); i++) {
				int nextNode = list[current[0]].get(i);
				if(!isSelected[nextNode]) {
					isSelected[nextNode] = true;
					isVisited[nextNode] = cnt+1;
					queue.offer(new int[] {nextNode, cnt+1});
				}
			}
		}
	
	}

}
